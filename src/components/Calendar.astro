---
interface Shift {
	start: string;
	end: string;
	color: string;
}

interface ShiftDay {
	date: Date;
	shift?: Shift;
	type: string; // "day", "night-start", "night-end", "rest"
}

const dayShift: Shift = { start: '07:00', end: '19:00', color: 'lightblue' };
const nightShift: Shift = { start: '19:00', end: '07:00', color: 'lightgray' };

const weekdays = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];
const months = [
	'January',
	'February',
	'March',
	'April',
	'May',
	'June',
	'July',
	'August',
	'September',
	'October',
	'November',
	'December',
];

let selectedYear = new Date().getFullYear();
let currentMonth = new Date().getMonth();
let selectedMonth = 9; // October (0-indexed)
let startYear = 2024;
let firstDayShift = 16;

const isToday = (date: Date): boolean => {
	const today = new Date();
	return (
		date.getFullYear() === today.getFullYear() &&
		date.getMonth() === today.getMonth() &&
		date.getDate() === today.getDate()
	);
};

// Helper functions
function daysInMonth(month: number, year: number): number {
	return new Date(year, month + 1, 0).getDate();
}

function getStartDay(month: number, year: number): number {
	const startDay = new Date(year, month, 1).getDay();
	return (startDay + 6) % 7; // Shift so Monday = 0, Sunday = 6
}

function generateCalendar(month: number, year: number): ShiftDay[] {
	const totalDays = daysInMonth(month, year);
	const referenceDate = new Date(startYear, 9, firstDayShift); // 16th of October, 2024
	const currentMonthFirstDay = new Date(year, month, 1);
	const daysSinceFirstShift = Math.floor(
		(currentMonthFirstDay.getTime() - referenceDate.getTime()) / (1000 * 60 * 60 * 24)
	);
	let patternOffset = ((daysSinceFirstShift % 4) + 4) % 4;

	const calendarDays: ShiftDay[] = [];
	const startDayOffset = getStartDay(month, year);

	// Add empty cells for alignment
	for (let i = 0; i < startDayOffset; i++) {
		calendarDays.push({ date: new Date(year, month, i), type: 'empty' });
	}

	// Fill calendar days with shifts
	for (let currentDate = 1; currentDate <= totalDays; ) {
		switch (patternOffset) {
			case 0:
				calendarDays.push({
					date: new Date(year, month, currentDate),
					shift: dayShift,
					type: 'day',
				});
				break;
			case 1:
				calendarDays.push({
					date: new Date(year, month, currentDate),
					shift: nightShift,
					type: 'night-start',
				});
				break;
			case 2:
				calendarDays.push({
					date: new Date(year, month, currentDate),
					shift: nightShift,
					type: 'night-end',
				});
				break;
			case 3:
				calendarDays.push({
					date: new Date(year, month, currentDate),
					type: 'rest',
				});
				break;
		}
		patternOffset = (patternOffset + 1) % 4;
		currentDate++;
	}

	return calendarDays;
}
---

<div class="month-group">
	<!-- Current Year -->
	{
		months.slice(currentMonth, 12).map((month, index) => (
			<>
				<div class="day-header">
					{month} {selectedYear}
				</div>
				<div class="calendar">
					{weekdays.map((weekday) => (
						<div class="day-header">{weekday}</div>
					))}
					{generateCalendar(index + currentMonth, selectedYear).map((day) => (
						<div
							class={`day ${
								day.type === 'day'
									? 'shift-day'
									: day.type === 'night-start' || day.type === 'night-end'
										? ''
										: day.type === 'rest'
											? 'rest'
											: 'empty'
							}`}
						>
							{day.type !== 'empty' && (
								<p class={`${isToday(day.date) ? 'today' : ''}`}>{day.date.getDate()}</p>
							)}
							{day.type === 'night-start' && (
								<div class="half-cell">
									<div class="half-right" />
								</div>
							)}
							{day.type === 'night-end' && (
								<div class="half-cell">
									<div class="half-left" />
								</div>
							)}
						</div>
					))}
				</div>
			</>
		))
	}

	<!-- Next Year -->
	{
		months.map((month, index) => (
			<>
				<div class="day-header">
					{month} {selectedYear + 1}
				</div>
				<div class="calendar">
					{weekdays.map((weekday) => (
						<div class="day-header">{weekday}</div>
					))}
					{generateCalendar(index, selectedYear + 1).map((day) => (
						<div
							class={`day ${
								day.type === 'day'
									? 'shift-day'
									: day.type === 'night-start' || day.type === 'night-end'
										? ''
										: day.type === 'rest'
											? 'rest'
											: 'empty'
							}`}
						>
							{day.type !== 'empty' && <p>{day.date.getDate()}</p>}
							{day.type === 'night-start' && (
								<div class="half-cell">
									<div class="half-right" />
								</div>
							)}
							{day.type === 'night-end' && (
								<div class="half-cell">
									<div class="half-left" />
								</div>
							)}
						</div>
					))}
				</div>
			</>
		))
	}
</div>

<style>
	.calendar {
		display: grid;
		grid-template-columns: repeat(7, minmax(50px, 1fr)); /* Responsive columns with a minimum width of 50px */
		gap: 5px;
		margin: 20px;
		padding-bottom: 40px;
	}

	.day {
		border: 1px solid #ccc;
		display: flex;
		flex-direction: column;
		justify-content: center; /* Center content vertically */
		align-items: center; /* Center content horizontally */
		aspect-ratio: 1 / 1; /* Keeps the cell square */
		position: relative;
		height: 100%;
	}

	.half-right {
		background-color: lightgray;
		height: 100%;
		width: 50%;
		position: absolute;
		right: 0;
		top: 0;
	}

	.half-left {
		background-color: lightgray;
		height: 100%;
		width: 50%;
		position: absolute;
		left: 0;
		top: 0;
	}

	.shift-day {
		background-color: lightblue;
	}

	.rest {
		background-color: white;
	}

	.day-header {
		font-weight: bold;
		text-align: center;
	}

	.month-group {
		margin-bottom: 20px;
	}

	.day p {
		position: relative;
		z-index: 10;
		margin: 0; /* Remove default margin */
		font-size: 1em; /* Adjust font size as needed */
		display: flex;
		justify-content: center; /* Center horizontally */
		align-items: center; /* Center vertically */
		height: 100%; /* Ensure it takes up the full height of the day cell */
		width: 100%; /* Ensure it takes up the full width of the day cell */
	}

	.today {
		background-color: red;
		border-radius: 50%;
		width: 25px !important;
		height: 25px !important;
	}
</style>
